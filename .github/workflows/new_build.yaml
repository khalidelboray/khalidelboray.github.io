name: Jekyll Deploy

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Install libgsl-dev
        run: sudo apt-get install -y libgsl-dev

      # - name: ðŸ“‚ GitHub Checkout
      #   uses: actions/checkout@v2

      - name: ðŸ’Ž setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7 # can change this to 2.7 or whatever version you prefer

      # - name: Bundler Cache
      #   uses: actions/cache@v2
      #   with:
      #     path: vendor/bundle
      #     key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gems-

      # Clone the repo to a directory called repo
      - name: Clone the repo
        run: git clone ${{ github.server_url }}/${{ github.repository }}.git repo

      # Change directory to the repo directory
      - name: Change directory to the repo directory
        run: cd repo

      # Print where we are
      - name: Print where we are
        working-directory: repo
        run: pwd

      # Install bundler
      - name: Install bundler
        run: gem install bundler

      # Install gems
      - name: Install gems
        working-directory: repo
        run: |
         bundle config set deployment true
         bundle install --jobs=4 --retry=3

      # Build the site
      - name: Build the site
        working-directory: repo
        run: JEKYLL_ENV="production" bundle exec jekyll build -V && touch _site/.nojekyll

      # Create a new folder with the contents of the _site folder for the gh-pages branch
      - name: Create a new folder with the contents of the _site folder for the gh-pages branch
        working-directory: repo
        run: mkdir ../gh-pages && ls

      # Add a blank .nojekyll file to the repo to stop GitHub from generating a 404 for /.nojekyll
      - name: Add a blank .nojekyll file to the repo to stop GitHub Pages processing
        working-directory: repo
        run: touch ../gh-pages/.nojekyll

      # Copy the contents of the _site folder to the gh-pages folder
      - name: Copy the contents of the _site folder to the gh-pages folder
        working-directory: repo
        run: cp -rf _site/* ../gh-pages

      # set the gh-pages folder to be a git repo
      - name: set the gh-pages folder to be a git repo
        working-directory: gh-pages
        run: git init

      # Add remore origin to gh-pages directory
      - name: Add remore origin to gh-pages directory
        working-directory: gh-pages
        run: git remote add origin ${{ github.server_url }}/${{ github.repository }}.git

      # Checkout the gh-pages branch
      - name: Checkout the gh-pages branch
        working-directory: gh-pages
        run: git checkout -b gh-pages

      # Add all files to the gh-pages branch
      - name: Add all files to the gh-pages branch
        working-directory: gh-pages
        run: git add .

      # Commit the changes
      - name: Commit the changes
        uses: fregante/setup-git-user@v1
        working-directory: gh-pages
        run: |
          # git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          # git config --global user.name "${{ github.actor }}"
          git commit -m "Deployed to GitHub Pages by ${{github.actor}} on ${{ github.event.created_at }} with commit ${{github.event.commit}}"

      # Push the changes to the gh-pages branch
      - name: Push the changes to the gh-pages branch
        working-directory: gh-pages
        run: git push origin gh-pages
